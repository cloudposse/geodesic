#!/bin/bash
#  ## import dashboards for Grafana

OVERWRITE=false
# Requires
#  GRAFANA_API_KEY: api key authorizing "edit" on dashboards
#  PROMETHEUS_GRAFANA_ROOT_URL or GRAFANA_ROOT_URL: URL to which '/api/dashboards...' will be appended
# Optional
#  GRAFANA_API_USER: username of user authorized to "edit" dashboards (GRAFANA_API_KEY is user's password)
#

function _usage() {
	cat <<EOF
Usage:
  grafana-db [--overwrite] <URL, gnetId, or file>

  URL is URL to (raw) ConfigMap or ConfigMapList containing Grafana dashboards
  as for Prometheus Operator gnetId is ID (typically a 4 digit number) for the
  dashaboard on Grafana.com
  file is a local file. It must have the .json extension if contains only a JSON dashboard

  --overwrite Replace dashboards having the same uid, even if the existing dashboard has been modified

Example:
  # Load the latest version of kube-prometheus standard Kubernetes Grafana dashboards, replacing any already uploaded
  grafana-db --overwrite https://raw.githubusercontent.com/prometheus-operator/kube-prometheus/master/manifests/grafana-dashboardDefinitions.yaml

  # Load the Kubernetes Capacity dashboard with gnetId 5228 from Grafana.com
  grafana-db 5228

  # Load a dashboard from a local file containing a dashboard in a Grafana ConfigMap
  grafana-db dashboard.yaml

  # Load a dashboard from a local file downloaded from your local Grafana.
  # Note: If you want to create a different instance of the dashboard in the Grafana instance you downloaded
  # the dashboard from, you first need to change the "uid" and "title" fields in the file.
  grafana-db dashboard.json

EOF
}

## DONE
## - Allow uploading a local file. Main thing is determining, detecting, and parsing format of file
## - Optional overwrite flag
## TODO
## - Remove absolute times in .time
##   - Bonus points:
##     - calculate the time interval in .time and replace with relative time interval of same length
##       - round to standard relative time choice
## - Better error handling
## - Allow host and api_key on command line
## - Optional deletion of UID
## - Optional additional input specifications
##   - Ensure new definitions override defaults
##   - Optional suppression of default input specifications
## - Allow the ability to upload dashboards to a designated folder

function download_dashboard() {
	local grafana_com="https://grafana.com/api/dashboards"
	local tmpdir=$(mktemp -d)
	trap "rm -rf $tmpdir" RETURN EXIT

	local count=0
	local files=()
	local url="$1"
	# Allow Grafana.com dashbobord to be specified simply by its gnetId, typically 4 digits
	if [[ "$url" =~ ^[0-9]*$ ]]; then
		url="${grafana_com}/${url}"
	elif [[ ! "$url" =~ ^https? ]]; then
		if [[ "$url" =~ ^/ ]]; then
			url="file://$url"
		else
			url="file://${PWD}/${url}"
		fi
	fi

	while IFS= read -r line; do
		files+=("${tmpdir}/${count}.json")
		printf "%s" "$line" >"${files[-1]}"
		((count += 1))
	done < <(curl -sSLf "$url" | parse_dashboard_definition "$1")

	if (($count == 0)); then
		red "! Failed to find a dashboard at $url" 1>&2
		exit 1
	elif (($count > 49)); then
		red "! Download created $count dashboards, which is too many. Probably parsed the file incorrectly. Aborting." 1>&2
		exit 99
	else
		green "* Downloaded $count dashboards from ${url}" 1>&2
	fi
	for file in "${files[@]}"; do
		upload_dashboard "$file"
		echo
	done
}

function upload_dashboard() {
	local host="${GRAFANA_ROOT_URL:-$PROMETHEUS_GRAFANA_ROOT_URL}"
	local ds_inputs='[
    {
      "name": "DS_PROMETHEUS",
      "type": "datasource",
      "pluginId": "prometheus",
      "value": "Prometheus"
    },
    {
      "name": "DS_CLOUDWATCH",
      "type": "datasource",
      "pluginId": "cloudwatch",
      "value": "CloudWatch"
    },
    {
      "name": "DS_ELASTICSEARCH",
      "type": "datasource",
      "pluginId": "elasticsearch",
      "value": "Elasticsearch"
    }
  ]'

	local title=$(jq <"$1" .title)
	green "* Starting upload of dashboard titled ${title}" 1>&2
	if (($(jq <"$1" 'if .__inputs? then (.__inputs|length) else 0 end') == 0)); then
		# Upload a real dashboard, what could be in a configmap
		jq <"$1" '.editable=true | {dashboard: ., overwrite: '$OVERWRITE'}' |
			curl -qs -w "%{stderr}* Upload of dashboard $title finished with status code %{http_code}\n" \
				-X POST -H "Content-Type: application/json" -u "${GRAFANA_API_USER:-api_key}:${GRAFANA_API_KEY}" --data-binary @- \
				"$host/api/dashboards/db" | (parse_grafana_response 2>/dev/null || :)
	else
		# Import a portable dashboard, as from Grafana.com
		jq <"$1" --argjson inputs "$ds_inputs" '.editable = true | {dashboard: ., inputs: $inputs, overwrite: '$OVERWRITE'}' |
			curl -qs -w "%{stderr}* Upload of dashboard $title finished with status code %{http_code}\n" \
				-X POST -H "Content-Type: application/json" -u "${GRAFANA_API_USER:-api_key}:${GRAFANA_API_KEY}" --data-binary @- \
				"$host/api/dashboards/import" | (parse_grafana_response 2>/dev/null || :)
	fi

	#  Status codes from https://grafana.com/docs/http_api/dashboard/#create-update-dashboard
	#  Status Codes:
	#
	#  200 – Created
	#  400 – Errors (invalid json, missing or invalid fields, etc)
	#  401 – Unauthorized
	#  403 – Access denied
	#  412 – Precondition failed
	#  The 412 status code is used for explaining that you cannot create the dashboard and why. There can be different reasons for this:
	#
	#  The dashboard has been changed by someone else, status=version-mismatch
	#  A dashboard with the same name in the folder already exists, status=name-exists
	#  A dashboard with the same uid already exists, status=name-exists
	#  The dashboard belongs to plugin <plugin title>, status=plugin-dashboard
	#
	# Status 500 usually comes from there being something wrong with the dashboard. Check the Grafana logs.
	# If importing from Grafana.com, it could be that there are variables that need to be set that
	# this script does not set.

}

function parse_dashboard_definition() {
	if [[ "$1" =~ .json$ ]]; then
		# Compact the JSON to a single line
		jq -rc
	else
		yq r -j '-d*' - | jq -rc '.. | if .data? then (.data | to_entries | .[].value | fromjson) elif .json? then .json else empty end'
	fi
}

function parse_grafana_response() {
	jq -r '"* " + if .status? then "Grafana reports \(.status)\(if .message? then ": \(.message)" else empty end)"
	 else if .message? then "Grafana says: \(.message)" else empty end end'
}

function red() {
	echo "$(tput setaf 1)$*$(tput sgr0)"
}

function green() {
	echo "$(tput setaf 2)$*$(tput sgr0)"
}

# Keep us from exiting the shell if this file is sourced by using return instead of exit
function _main() {
	if [[ -z "$GRAFANA_API_KEY" ]]; then
		red GRAFANA_API_KEY must be set to a valid API key for accessing Grafana
		return 3
	fi

	if [[ -z "${GRAFANA_ROOT_URL:-$PROMETHEUS_GRAFANA_ROOT_URL}" ]]; then
		red either GRAFANA_ROOT_URL or PROMETHEUS_GRAFANA_ROOT_URL must be set to Grafana hostname
		return 4
	fi
	case $1 in
	--overwrite)
		OVERWRITE=true
		shift
		;;

	--*)
		red Unknown option "$1"
		exit 99
		;;
	esac

	if (($# != 1)); then
		_usage && return 1
	else
		download_dashboard "$1"
	fi
}

if (($# == 0)); then
	## Allow script to be sourced without complaint
	if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
		_usage
	fi
else
	_main "$@"
fi
