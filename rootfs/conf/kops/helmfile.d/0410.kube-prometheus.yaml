helmDefaults:
  args:
    - "--wait"
    - "--recreate-pods"
    - "--timeout=600" 
    - "--force"
    - "--reset-values"

repositories:
# CoreOS Stable helm charts
- name: "coreos-stable"
  url: "https://s3-eu-west-1.amazonaws.com/coreos-charts/stable"

releases:

#######################################################################################
## kube-prometheus                                                                   ##
## Collects Kubernetes manifests, Grafana dashboards, and Prometheus rules           ##
## combined with documentation and scripts to provide single-command                 ##
## deployments of end-to-end Kubernetes cluster monitoring with Prometheus operator  ##
#######################################################################################

#
# References:
#   - https://github.com/coreos/prometheus-operator/tree/master/helm/kube-prometheus
#   - https://github.com/coreos/prometheus-operator/tree/master/contrib/kube-prometheus
#   - https://prometheus.io/docs/alerting/configuration
#   - https://medium.com/@timfpark/simple-kubernetes-cluster-monitoring-with-prometheus-and-grafana-dd27edb1641
#   - https://www.weave.works/blog/monitoring-kubernetes-infrastructure
#   - https://www.datadoghq.com/blog/how-to-collect-and-graph-kubernetes-metrics
#
- name: "kube-prometheus"
  namespace: "monitoring"
  labels:
    chart: "kube-prometheus"
    component: "monitoring"
    namespace: "monitoring"
    vendor: "coreos"
    default: "true"
  chart: "coreos-stable/kube-prometheus"
  version: "0.0.66"
  values:
    - "values/kube-prometheus.grafana.dashboards.yaml"
  set:
    - name: "global.rbacEnable"
      value: "false"

    - name: "deployExporterNode"
      value: "true"

    - name: "exporter-node.resources.limits.cpu"
      value: "10m"

    - name: "exporter-node.resources.limits.memory"
      value: "32Mi"

    - name: "exporter-node.resources.requests.cpu"
      value: "5m"

    - name: "exporter-node.resources.requests.memory"
      value: "16Mi"

    - name: "deployGrafana"
      value: "true"

    - name: "grafana.resources.limits.cpu"
      value: "50m"

    - name: "grafana.resources.limits.memory"
      value: "64Mi"

    - name: "grafana.resources.requests.cpu"
      value: "10m"

    - name: "grafana.resources.requests.memory"
      value: "64Mi"

    - name: "exporter-kube-state.resources.limits.cpu"
      value: "50m"

    - name: "exporter-kube-state.resources.limits.memory"
      value: "64Mi"

    - name: "exporter-kube-state.resources.requests.cpu"
      value: "10m"

    - name: "exporter-kube-state.resources.requests.memory"
      value: "64Mi"

    # AlertManager
    - name: "deployAlertManager"
      value: "true"

    - name: "alertmanager.paused"
      value: "false"

    - name: "alertmanager.podAntiAffinity"
      value: "soft"

    ### Optional: KUBE_PROMETHEUS_ALERT_MANAGER_REPLICA_COUNT; e.g. 4
    - name: "alertmanager.replicaCount"
      value: '{{ env "KUBE_PROMETHEUS_ALERT_MANAGER_REPLICA_COUNT" | default "4" }}'

    - name: "alertmanager.image.repository"
      value: "quay.io/prometheus/alertmanager"

    ### Optional: KUBE_PROMETHEUS_ALERT_MANAGER_IMAGE_TAG; e.g. v0.14.0
    - name: "alertmanager.image.tag"
      value: '{{ env "KUBE_PROMETHEUS_ALERT_MANAGER_IMAGE_TAG" | default "v0.14.0" }}'

    - name: "alertmanager.image.pullPolicy"
      value: "IfNotPresent"

    - name: "alertmanager.resources.limits.cpu"
      value: "10m"

    - name: "alertmanager.resources.limits.memory"
      value: "64Mi"

    - name: "alertmanager.resources.requests.cpu"
      value: "5m"

    - name: "alertmanager.resources.requests.memory"
      value: "32Mi"

    - name: "alertmanager.config.global.resolve_timeout"
      value: "5m"

    - name: "alertmanager.config.route.group_by[0]"
      value: "alertname"

    - name: "alertmanager.config.route.group_by[1]"
      value: "namespace"

    - name: "alertmanager.config.route.group_wait"
      value: "30s"

    - name: "alertmanager.config.route.group_interval"
      value: "5m"

    - name: "alertmanager.config.route.repeat_interval"
      value: "12h"

    - name: "alertmanager.config.route.receiver"
      value: "slack_general"

    - name: "alertmanager.config.route.routes[0].match.alertname"
      value: "DeadMansSwitch"

    - name: "alertmanager.config.route.routes[0].match.receiver"
      value: "null"

    - name: "alertmanager.config.receivers[0].name"
      value: "null"

    - name: "alertmanager.config.receivers[1].name"
      value: "slack_general"

    ### Required: KUBE_PROMETHEUS_ALERT_MANAGER_SLACK_WEBHOOK_URL
    - name: "alertmanager.config.receivers[1].slack_configs[0].api_url"
      value: '{{ env "KUBE_PROMETHEUS_ALERT_MANAGER_SLACK_WEBHOOK_URL" }}'

    ### Required: KUBE_PROMETHEUS_ALERT_MANAGER_SLACK_CHANNEL; e.g. #alerts-staging
    - name: "alertmanager.config.receivers[1].slack_configs[0].channel"
      value: '{{ env "KUBE_PROMETHEUS_ALERT_MANAGER_SLACK_CHANNEL" }}'

    - name: "alertmanager.config.receivers[1].slack_configs[0].send_resolved"
      value: "true"

    - name: "alertmanager.service.type"
      value: "ClusterIP"

    - name: "alertmanager.service.port"
      value: "80"

    - name: "alertmanager.ingress.enabled"
      value: "false"

    # Prometheus
    - name: "prometheus.retention"
      value: "31d"

    - name: "prometheus.routePrefix"
      value: "/"

    - name: "prometheus.config.specifiedInValues"
      value: "true"

    - name: "prometheus.rules.specifiedInValues"
      value: "true"

    - name: "prometheus.paused"
      value: "false"

    - name: "prometheus.podAntiAffinity"
      value: "soft"

    ### Optional: KUBE_PROMETHEUS_REPLICA_COUNT; e.g. 4
    - name: "prometheus.replicaCount"
      value: '{{ env "KUBE_PROMETHEUS_REPLICA_COUNT" | default "4" }}'

    - name: "prometheus.image.repository"
      value: "quay.io/prometheus/prometheus"

    ### Optional: KUBE_PROMETHEUS_IMAGE_TAG; e.g. v2.2.1
    - name: "prometheus.image.tag"
      value: '{{ env "KUBE_PROMETHEUS_IMAGE_TAG" | default "v2.2.1" }}'

    - name: "prometheus.image.pullPolicy"
      value: "IfNotPresent"

    - name: "prometheus.resources.limits.cpu"
      value: "400m"

    - name: "prometheus.resources.limits.memory"
      value: "2048Mi"

    - name: "prometheus.resources.requests.cpu"
      value: "100m"

    - name: "prometheus.resources.requests.memory"
      value: "512Mi"

    - name: "prometheus.storage.volumeClaimTemplate.spec.accessModes[0]"
      value: "ReadWrite"

    - name: "prometheus.storage.volumeClaimTemplate.spec.resources.requests.storage"
      value: "50Gi"

    - name: "prometheus.service.type"
      value: "ClusterIP"

    - name: "prometheus.service.port"
      value: "80"

    - name: "prometheus.ingress.enabled"
      value: "false"
