#!/bin/bash

function _usage() {
	cat <<EOF
$(basename $0): Compare 2 YAML file for semantic equivalency

Both files are converted to a canonical format before comparing, so the
output may not resemble the input even if the files are identical.

Assumes the order of items in an array is semantically important.

Usage:
  $(basename $0) old.yaml new.yaml

EOF
}

function yaml-diff() {
	local old=$(mktemp)
	local new=$(mktemp)
	trap "rm -rf $old $new" RETURN EXIT

	yq eval --no-colors 'sortKeys(..)' "$1" > "$old"
	yq eval --no-colors 'sortKeys(..)' "$2" > "$new"

	local color=never
	[[ -t 1 ]] && color=always
	if diff -q "$old" "$new" >/dev/null; then
		green "* No changes"
	else
		diff -y --color=$color -W 120 "$old" "$new"
	fi
}

function red() {
	echo "$(tput setaf 1)$*$(tput sgr0)" 1>&2
}

function green() {
	echo "$(tput setaf 2)$*$(tput sgr0)" 1>&2
}

function _main() {
	if (($# != 2)); then
		_usage && return 1
	else
		yaml-diff "$@"
	fi
}

if (($# == 0)); then
	## Allow script to be sourced without complaint
	if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
		_usage
	fi
else
	_main "$@"
fi
