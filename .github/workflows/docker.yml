name: "docker"
on:
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types:
    # "released" excludes pre-releases
    # "published" is either a release or a pre-release
    - published
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['alpine', 'debian']
    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
    - name: Prepare tags for Docker image
      id: prepare
      # Even though we are no longer releasing plain numbered version tags like "0.111.0"
      # because we want all versions to explicitly identify their base OS, we still need
      # to provide a "latest" tag for automation that just wants the current version.
      # We therefore designate whichever base OS version we recommend as the best supported
      # as the one to get the "latest" tag. Initially that will be Alpine.
      env:
        LATEST_TAG_OS: 'alpine'
        BASE_OS: ${{matrix.os}} 
      run: |
        echo ::set-output name=publish::${{ (github.event_name == 'release' && github.event.action == 'published') || (github.event.pull_request.head.repo.full_name == github.repository) }}
        COMMIT_SHA="${GITHUB_SHA}"
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.pull_request.number }}
          COMMIT_SHA=${{ github.event.pull_request.head.sha }}
        fi
        printf "Version resolved to %s\n" "${VERSION}"
        echo ::set-output name=version::${VERSION}
        TAGS="${{ github.repository }}:sha-${COMMIT_SHA:0:7}-${BASE_OS}"
        if [[ -n $VERSION ]]; then
          TAGS="$TAGS,${{ github.repository }}:${VERSION}-${BASE_OS}"
        fi
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS,${{ github.repository }}:latest-${BASE_OS}"
          LATEST_TAGS="$TAGS,${{ github.repository }}:latest"
        else
          LATEST_TAGS="$TAGS"
        fi
        printf "Tagging %s with " "${BASE_OS}"
        if [[ "${BASE_OS}" == "$LATEST_TAG_OS" ]]; then
          printf "%s\n" "${LATEST_TAGS}"
          echo ::set-output name=tags::${LATEST_TAGS}
        else
          printf "%s\n" "${TAGS}"
          echo ::set-output name=tags::${TAGS}
        fi
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      if: steps.prepare.outputs.publish == 'true'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: "Build and push docker image to DockerHub"
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: ${{ steps.prepare.outputs.publish == 'true' }}
        tags: ${{ steps.prepare.outputs.tags }}
        file: ./os/${{matrix.os}}/Dockerfile.${{matrix.os}}
        build-args: |
          VERSION=${{ steps.prepare.outputs.version }}
