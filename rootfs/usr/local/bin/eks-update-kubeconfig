#!/bin/bash

# Usage:
#   eks-update-kubeconfig <cluster-short-name>|off
#
#   With <cluster-short-name> updates the kubecfg file for the cluster with that short name (e.g. "corp")
#   With "off", deletes the currently active kubecfg file.
#
main() {
	if [[ $KUBECONFIG =~ ":" ]]; then
		red "$0 requires that KUBECONFIG point to a single file, not a set of directories" >&2
		return 9
	fi
	if [[ $1 == "off" ]]; then
		if [[ -n $KUBECONFIG ]] && [[ -f $KUBECONFIG ]]; then
			rm -f $KUBECONFIG
		fi
		return 0
	fi

	EKS_CLUSTER_NAME_PATTERN="${EKS_CLUSTER_NAME_PATTERN:-${NAMESPACE:+${NAMESPACE}-}%s-eks-cluster}"
	EKS_CLUSTER_PROFILE_PATTERN="${EKS_CLUSTER_PROFILE_PATTERN:-${NAMESPACE:+${NAMESPACE}-}%s-${2:-${EKS_DEFAULT_PROFILE:-admin}}}"
	KUBECONFIG_DIR=$(dirname ${KUBECONFIG:-/dev/shm/kubecfg})
	EKS_KUBECONFIG_PATTERN="${EKS_KUBECONFIG_PATTERN:-${KUBECONFIG_DIR}/kubecfg.%s}"
	KUBECONFIG=$(printf "$EKS_KUBECONFIG_PATTERN" $1)

	aws --profile $(printf "$EKS_CLUSTER_PROFILE_PATTERN" $1) eks update-kubeconfig --name=$(printf "$EKS_CLUSTER_NAME_PATTERN" $1) --kubeconfig="${KUBECONFIG}"
}

main "$@"
