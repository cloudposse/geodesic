#!/bin/bash
# Geodesic Wrapper Script

set -o pipefail

# Geodesic Settings
export GEODESIC_PORT=${GEODESIC_PORT:-8001}
export GEODESIC_INSTALLER_URL=${GEODESIC_INSTALLER_URL:-https://geodesic.sh}

STATE_DIR=${STATE_DIR:-${HOME}/.geodesic}
OS=$(uname -s)

export options=()
export targets=()

function options_to_env() {
  local kv
  local k
  local v

  for option in ${options[@]}; do
    kv=(${option/=/ })
    k=${kv[0]}    # Take first element as key
    k=${k#--}     # Strip leading --
    k=${k//-/_}   # Convert dashes to underscores
    k=${k^^}      # Convert to uppercase

    v=${kv[1]}    # Treat second element as value
    v=${v:-true}  # Set it to true for boolean flags

    declare -g $k="$v"
  done
}

function debug() {
  if [ "${VERBOSE}" == "true" ]; then
    echo "[DEBUG] $*"
  fi
}

function use() {
  if [ -t 1 ]; then
    # Running in terminal 
    DOCKER_ARGS=(-it --rm --name="${DOCKER_NAME}-bootstrap" --env LS_COLORS --env TERM --env TERM_COLOR --env TERM_PROGRAM)

    if [ -n "$SSH_AUTH_SOCK" ]; then
      if [ `uname -s` == 'Darwin' ]; then
        # Run our own SSH agent
        DOCKER_ARGS=("${DOCKER_ARGS[@]}"
                       --volume "${HOME}/.ssh:/mnt/local/.ssh" )
      else
        DOCKER_ARGS=("${DOCKER_ARGS[@]}"
                       --volume "$SSH_AUTH_SOCK:$SSH_AUTH_SOCK" 
                       --env SSH_AUTH_SOCK
                       --env SSH_CLIENT
                       --env SSH_CONNECTION
                       --env SSH_TTY 
                       --env USER)
      fi
    fi
  else
    DOCKER_ARGS=()
  fi

  if [ "${OS}" == "Darwin" ]; then
    # Run in privleged mode to enable time synchronization of system clock with hardware clock
    # Implement DNS fix related to https://github.com/docker/docker/issues/24344
    DOCKER_ARGS=("${DOCKER_ARGS[@]}"
                  --dns=${DOCKER_DNS}
                )
  fi

  if [ -n "${HOME}" ]; then
    if [ "${HOME}" == "/mnt/local" ]; then
      echo "WARNING: not mounting ${HOME} because it conflicts with geodesic"
    else
      echo "# Mounting ${HOME} into container"
      DOCKER_ARGS=("${DOCKER_ARGS[@]}"
                    --volume=${HOME}:${HOME}
                  )
    fi
  fi

  DOCKER_ARGS=("${DOCKER_ARGS[@]}"
                --privileged
                --publish ${GEODESIC_PORT}:${GEODESIC_PORT}
                --name "${DOCKER_NAME}"
                --rm 
                --env BOOTSTRAP=false
                --env KUBERNETES_API_PORT=${GEODESIC_PORT}
                --volume ${STATE_DIR}:/mnt/local)
  set -o pipefail
  docker ps | grep -q ${DOCKER_NAME} >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "# Attaching to existing ${DOCKER_NAME} session"
    if [ $# -eq 0 ]; then
      set -- "/bin/bash" "-l" "$@"
    fi
    docker exec -it "${DOCKER_NAME}" $*
  else
    echo "# Starting new ${DOCKER_NAME} session"
    docker run "${DOCKER_ARGS[@]}" ${DOCKER_IMAGE} $*
  fi
}

while [[ $1 ]]
do
  case "$1" in
    -h | --help)
      targets+=("help")
      shift
      ;;
    -v | --verbose)
      export VERBOSE=true
      shift
      ;;
    --*)
      options+=("${1}")
      shift
      ;;
    --) # End of all options
      shift
      ;;
    -*)
      echo "Error: Unknown option: $1" >&2
      exit 1
      ;;
    *=*)
      declare -g "${1}"
      shift
      ;;
    *)
      targets+=("${1}")
      shift
      ;;
  esac
done

options_to_env

# Docker settings
export DOCKER_TAG=${TAG:-latest}
export DOCKER_NAME=${NAME:-}
export DOCKER_DNS=${DNS:-8.8.8.8}
export DOCKER_IMAGE=${IMAGE:-${DOCKER_NAME}:${DOCKER_TAG}}

if [ "${GEODESIC_SHELL}" == "true" ]; then
  echo "Cannot run while in a geodesic shell"
  exit 1
fi

if [ -z "${DOCKER_NAME}" ]; then
  echo "Error: --name not specfified (E.g. --name foobar.example.com)"
  exit 1
fi

mkdir -p ${STATE_DIR}

if ! which docker > /dev/null; then
  echo "Cannot find docker installed on this system. Please install and try again."
  exit 1
fi

docker ps >/dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "Unable to communicate with docker daemon. Make sure your environment is properly configured and then try again."
  exit 1
fi

if [ -z "$targets" ]; then
  echo "Must specify a target"
  exit 1
fi

for target in $targets; do
  if [ "$target" == "update" ]; then
    echo "# Installing the latest version of geodesic from ${GEODESIC_INSTALLER_URL}"
    curl --silent --fail ${GEODESIC_INSTALLER_URL} | bash
    if [ $? -eq 0 ]; then
      echo "# ${DOCKER_IMAGE} has been updated."
      exit 0
    else
      echo "Failed to update geodesic"
      exit 1
    fi
  elif [ "$target" == "uninstall" ]; then
    echo "# Uninstalling ${DOCKER_NAME}..."
    docker rm -f ${DOCKER_NAME} >/dev/null 2>&1 || true
    docker rmi -f ${DOCKER_IMAGE} >/dev/null 2>&1 || true
    exit 0
  elif [ "$target" == "stop" ]; then
    echo "# Stopping ${DOCKER_NAME}..."
    exec docker kill ${DOCKER_NAME} >/dev/null 2>&1
  elif [ "$target" == "use" ]; then
    use
  else 
    echo "Unknown target: $target"
    exit 1
  fi
done