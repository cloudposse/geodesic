#!/usr/bin/variant
# vim:set ft=yaml

mixins:
  # Import chamber environment
  chamber: &chamber
    source <(chamber exec kops -- sh -c 'export -p' 2>/dev/null)

  # Exit on all errors
  exit_on_errors: &exit_on_errors
    set -e

  # Default runner
  runner: &runner
    command: "bash"
    args: ["-ex", "-c"]

tasks:

 # Cluster Operations
  cluster:
    description: "Operations to perform on the kops cluster"

    tasks:
      # Show a plan of pending changes
      plan:
        description: "Show a plan of pending changes"
        script:
        - *exit_on_errors
        - *chamber
        - |
          kops cluster update
          kops cluster rolling-update

      # Apply pending changes
      apply:
        description: "Apply pending changes"
        script:
        - *exit_on_errors
        - *chamber
        - |
          kops update cluster --yes
          kops rolling-update cluster --force --yes 

      # SSH Operations
      ssh:
        description: "SSH Key Management"
        parameters:
        - name: name
          type: string
          default: admin
          description: "SSH Public Key secret name"
          required: true
        tasks:
          # Connect to bastion instance
          bastion:
            description: "Connect to the bastion using ssh-agent forwarding"
            interactive: true
            <<: *runner
            script:
            - *exit_on_errors
            - *chamber
            - |
              eval $(ssh-agent -s)
              ssh-add - <<<${KOPS_SSH_PRIVATE_KEY}
              ssh -A admin@bastion.${KOPS_CLUSTER_NAME}
              eval $(ssh-agent -k) >/dev/null

           # Create Public Key 
          create:
            description: "Create the cluster SSH public key"
            script:
            - *exit_on_errors
            - *chamber
            - |
              public_key_file=$(mktemp)
              chamber read kops -q kops_ssh_public_key > "${public_key_file}"
              kops create secret sshpublickey {{ get "name" }} -i "${public_key_file}"
              rm -f "${public_key_file}"

          # Delete Public Key
          delete:
            description: "Delete the cluster SSH public key"
            script:
            - *exit_on_errors
            - *chamber
            - |
              kops delete secret sshpublickey {{ get "name" }}

          # Key Rotation
          rotate:
            description: "Rotate the cluster SSH public key"
            steps:
              - or:
                - task: "cluster.ssh.delete"
                - script: "true"
              - task: "cluster.ssh.create"
              - task: "cluster.apply"

