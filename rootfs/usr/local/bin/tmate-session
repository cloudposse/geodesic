#!/usr/bin/env bash

export TMATE_SOCK=${TMATE_SOCK:-/tmp/tmate.sock}
export HOME=/root
export TMATE_SSH_KEY="${TMATE_SSH_KEY:-/root/.ssh/id_rsa}"

# Ensure that `tmate` is installed
which tmate >/dev/null 2>&1 || (echo "tmate not installed" && exit 1)

function parse_args() {
	while [[ $1 ]]; do
		case "$1" in
		-d | --server-mode)
			server_mode
			shift
			;;
		-1 | --once)
			tmate_session
			shift
			;;
		-k | --stop)
			killall tmate
			shift
			;;
		*)
			echo "Error: Unknown option: $1" >&2
			exit 1
			;;
		esac
	done
}

function ssh_keygen() {
	[ -f "${TMATE_SSH_KEY}" ] || ssh-keygen -t rsa -N "" -f "${TMATE_SSH_KEY}"
}

function ctrl_c() {
	echo "[INFO] Okay, shutting down..."
	killall tmate
	rm -f "${TMATE_SOCK}"
}

function wait_pid() {
	if [ -z "$1" ]; then
		echo "No pid"
		exit 1
	fi
	while [ -e /proc/$1 ]; do
		sleep 1
	done
}

function tmate_session() {
	if [ -e "${TMATE_SOCK}" ]; then
		echo "[ERROR] tmate session running"
		exit 1
	fi

	# tmate requires ssh keys
	ssh_keygen

	# Launch tmate in a detached state
	tmate -S ${TMATE_SOCK} new-session -d

	# Blocks until the SSH connection is established
	tmate -S ${TMATE_SOCK} wait tmate-ready

	# Prints the SSH connection string
	tmate -S ${TMATE_SOCK} display -p '#{tmate_ssh}'

	# Prints the read-only SSH connection string
	tmate -S ${TMATE_SOCK} display -p '#{tmate_ssh_ro}'

	# Prints the web connection string
	tmate -S ${TMATE_SOCK} display -p '#{tmate_web}'

	# Prints the read-only web connection strin
	tmate -S ${TMATE_SOCK} display -p '#{tmate_web_ro}'
}

function server_mode() {
	while true; do
		echo "[INFO] Starting tmate server..."
		# Start a tmate session
		tmate_session

		# Wait for session to complete
		wait_pid $(pgrep tmate)

		echo "[INFO] Server exited."

		if [ ! -e "${TMATE_SOCK}" ]; then
			break
		fi

		sleep 1
	done
}

# Handle interrupts
trap ctrl_c INT

# Part command line arguments
parse_args $@

# Clean up
trap - INT
unset -f ctrl_c
