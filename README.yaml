name: Geodesic
license: APACHE2
github_repo: cloudposse/geodesic

logo: "docs/geodesic-small.png"

# Badges to display
badges:
  - name: "Build Status"
    image: "https://github.com/cloudposse/geodesic/workflows/docker/badge.svg"
    url: "https://github.com/cloudposse/geodesic/actions?query=workflow%3Adocker"
  - name: "FOSSA Status"
    image: "https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcloudposse%2Fgeodesic.svg?type=shield"
    url: "https://app.fossa.io/projects/git%2Bgithub.com%2Fcloudposse%2Fgeodesic?ref=badge_shield"
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/geodesic.svg"
    url: "https://github.com/cloudposse/geodesic/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"
  - name: "Slack Archive"
    image: "https://img.shields.io/badge/slack-archive-blue.svg"
    url: "https://archive.sweetops.com/geodesic"

# Screenshots
screenshots:
  - name: "Demo"
    description: "<br/>[Example of running a shell](https://github.com/cloudposse/testing.cloudposse.co) based on the `cloudposse/geodesic` base docker image."
    url: "https://sweetops.com/wp-content/uploads/2019/03/termtosvg_fmnxoium.svg"
 
related:
  - name: "Packages"
    description: "Cloud Posse installer and distribution of native apps"
    url: "https://github.com/cloudposse/packages"

  - name: "Build Harness"
    description: "Collection of Makefiles to facilitate building Golang projects, Dockerfiles, Helm charts, and more"
    url: "https://github.com/cloudposse/dev"

  - name: "terraform-aws-components"
    description: "Catalog of reusable Terraform components and blueprints for provisioning reference architectures"
    url: "https://github.com/cloudposse/terraform-aws-components"


description: |-

  Geodesic is the fastest way to get up and running with a rock solid, production grade cloud platform built entirely from Open Source technologies. 
  
  Itâ€™s a swiss army knife for creating and building consistent platforms to be shared across a team environment.

  It easily versions staging environments in a repeatable manner that can be followed by any team member.

  It's a way of doing things that allows companies to collaborate on infrastructure (~snowflakes~) and radically reduce Total Cost of Ownership, along with a vibrant and active [slack community](https://slack.cloudposse.com).

  It provides a fully customizable framework for defining and building cloud infrastructures backed by [AWS](https://aws.amazon.com/) and powered by [kubernetes](https://kubernetes.io/). It couples best-of-breed technologies with engineering best-practices to equip organizations with the tooling that enables clusters to be spun up in record time without compromising security. 

  It's works natively with Mac OSX, Linux, and [Windows 10 (WSL)](https://docs.microsoft.com/en-us/windows/wsl/install-win10).

introduction: |-
  These days, the typical software application is distributed as a docker image and run as a container. Why should infrastructure be any different? Since everything we write is "Infrastructure as Code", we believe that it should be treated the same way. This is the "Geodesic Way". Use containers+envs instead of unconventional wrappers, complicated folder structures and symlink hacks. Geodesic is the container for all your infrastructure automation needs that enables you to truly achieve SweetOps.
  
  Geodesic is composed of two parts:

    1. It is an interactive command-line shell. The shell includes the *ultimate* mashup of cloud orchestration tools.
    Those tools are then integrated to work in concert with each other using a consistent framework.
    Installation of the shell is as easy as running a docker container.
    2. It is a distribution of essential services and reference architectures. The distribution includes a collection of [100+ Free Terraform Modules](https://github.com/cloudposse?q=terraform-) and their [invocations](https://github.com/cloudposse/terraform-aws-components), dozens of preconfigured [Helmfiles](https://github.com/cloudposse/helmfiles), [Helm charts](https://github.com/cloudposse/charts) for CI/CD, VPN, SSH Bastion, Automatic DNS, Automatic TLS, Automatic Monitoring, Account Management, Log Collection, Load Balancing/Routing, Image Serving, and much more. What makes these charts even more valuable is that they were designed from the ground up to work well with each other and integrate with external services for authentication (SSO/OAuth2, MFA).

  An organization may chose to leverage all of these components, or just the parts that make their life easier.
  We recommend starting by using `geodesic` as a Docker base image (e.g. `FROM cloudposse/geodesic:...` pinned to a release and base OS) in your projects.

  **Note**: Starting with Geodesic version 0.138.0, we distribute 2 versions of Geodesic Docker images, one based on [Alpine](https://alpinelinux.org/)
  and one based on [Debian](https://debian.org), tagged `VERSION-BASE_OS`, e.g. `0.138.0-alpine`.
  Prior to this, all Docker images were based on Alpine only and simply tagged `VERSION`. At present, the Alpine version is the most thoroughly tested
  and best supported version, and the special Docker tag `latest` will continue to point to the latest Alpine version while this
  remains the case. However, we encourage people to use the Debian version and report any issues by opening a GitHub issue,
  so that we may eventually make it the preferred version, after which point the `latest` tag will point to latest Debian image. We
  will maintain the `latest-alpine` and `latest-debian` Docker tags for those who want to commit to using one base OS or
  the other but still want automatic updates.

  Let's roll...

  1. Review our [documentation](https://docs.cloudposse.com/geodesic/)
  2. Check our [reference architectures](https://docs.cloudposse.com/reference-architectures/) to learn how we architect the infrastructure
  3. Use our [coldstart automation](https://github.com/cloudposse/reference-architectures) to get started quickly
  4. Quickly provision [kops clusters](docs/kops.md)

usage: |-
  ### Customizing your Docker image

  In general we recommend creating a customized version of Geodesic by creating your own Dockerfile starting with
  ```
  ARG VERSION=0.138.0
  ARG OS=debian
  FROM cloudposse/geodesic:$VERSION-$OS

  # Add configuration options such as setting a custom BANNER,
  # turning on built-in support for aws-vault or aws-okta,
  # setting kops configuration parameters, etc. here

  ENV BANNER="my-custom-geodesic"
  ```
  You can see some example configuration options to include in [Dockerfile.options](./Dockerfile.options).

  You can also add extra commands by installing "packages". Both Alpine and Debian have a large selection
  of packages to choose from. Cloud Posse also provides a large set of packages for installing common DevOps commands
  and utilities via [cloudposse/packages](https://github.com/cloudposse/packages).
  The package repositories are pre-installed in Geodesic, all you need to do is add the packages you want
  via `RUN` commands in your Dockerfile.

  #### Installing packages in Alpine

  Under Alpine, you install a package by specifying a package name and a repository label (if not the default repository).
  (You can also specify a version, see [the Alpine documentation](https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management#Advanced_APK_Usage)
  for details). In addition to the default package repository, Geodesic installs 3 others:

  | Repository Label | Repository Name|
  |------------------|----------------|
  | @testing | edge/testing |
  | @community | edge/community |
  | @cloudposse | cloudposse/packages |

  As always, because of Docker layer caching, you should start your command line by updating the repo indexes,
  and then add your packages. Alpine uses [`apk`](https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management).
  So, to install [Teleport](https://gravitational.com/teleport) support from the Cloud Posse package repository,
  pinned to version 4.2.x (which is the last to support Alpine), we can add this to our Dockerfile:

  ```
  RUN apk update && apk add -u teleport@cloudposse=~4.2
  ```

  #### Installing packages in Debian

  Debian uses [`apt`](https://wiki.debian.org/Apt) for package management and we generally recommend using
  the [`apt-get`](https://www.debian.org/doc/manuals/apt-guide/ch2.en.html) command to install packages.
  In addition to the default repositories, Geodesic pre-installs the Cloud Posse [package](https://github.com/cloudposse/packages) repository
  and the Google Cloud SDK package repository. Unlike with `apk`, you do not need to specify a package repository when
  installing a package because all repositories will be searched for it.
  Also unlike `apk`, `apt-get` does not let you specify a version range on the command line, only an exact version.
  So to install the Google Cloud SDK at a specific version, you need to include a trailing `-0` to indicate
  the package version. For example, to install version Google Cloud SDK 300.0.0:

  ```
  RUN apt-get update && apt-get install -y google-cloud-sdk=300.0.0-0
  ```

  Note the `-y` flag to `apt-get install`. That is required for scripted installation, otherwise the command
  will ask for confirmation from the keyboard before installing a package.

  ### Customizing your shell at launch time

  After you have build your Docker image, or if you are using a shared Docker image, you can
  add further customization at launch time. When Geodesic stars up, it looks for customization
  scripts and configuration so you can do things like add command aliases or override preconfigured options.
  Detailed information about launch-time configuration is in the [customization](./docs/customization.md)
  document, available from within the shell via `man customization`.

# Other files to include in this README from the project folder
include:

# Contributors to this project
contributors:
  - name: "Erik Osterman"
    homepage: "https://github.com/osterman"
    avatar: "http://s.gravatar.com/avatar/88c480d4f73b813904e00a5695a454cb?s=144"
    github: "osterman"
  - name: "Igor Rodionov"
    homepage: "https://github.com/goruha/"
    avatar: "http://s.gravatar.com/avatar/bc70834d32ed4517568a1feb0b9be7e2?s=144"
    github: "goruha"
  - name: "Andriy Knysh"
    homepage: "https://github.com/aknysh/"
    avatar: "https://avatars0.githubusercontent.com/u/7356997?v=4&u=ed9ce1c9151d552d985bdf5546772e14ef7ab617&s=144"
    github: "aknysh"
  - name: "Sarkis Varozian"
    homepage: "https://github.com/sarkis"
    avatar: "https://avatars3.githubusercontent.com/u/42673?s=144&v=4"
    github: "sarkis"
  - name: "Oscar Sullivan"
    homepage: "https://github.com/osulli"
    avatar: "https://github.com/osulli.png?size=150"
    github: "osulli"
